/**
* Pipeline constraints
*/
context Pipeline {
         constraint firstTask{
                check: self.firstElementAsDataCollectionTask()
                message:  "The first task must be Data Collection."
        }
        
        constraint integrationTask{
                check: self.dataIntegrationTasksCheck()
                message: "At least two data flows for data integration task"
        }
        
        constraint growingExecutionDate{
        		guard: self.tasks.select(task | task.isExecuted == true)->size() > 0
                check: self.growingTaskTimestamps(0, self.tasks.select(task | task.isTypeOf(DataCollectionTask) and self.isFirstElementInTheTree(task))->first())
                message: "The tasks timestamp must be growing-"
        }
        
         constraint commonAttributesBetweenDataFlows{
         		guard: self.tasks.select(task | task.isTypeOf(DataIntegrationTask))->size() > 0
                check: self.commonJoinAttributes()
                message:  "The dataflows of data integration task must have the attributes specified in the join."
        }    
}

/**
* The first task of the pipeline must be a DataCollection task
*/
operation Pipeline firstElementAsDataCollectionTask() : Boolean {
	if (self.tasks.size() == 0 ) {
		return true;
	}
   
	var index = 0;
	for (task in self.tasks) {
		return task.isTypeOf(DataCollectionTask);
	}
}

/**
* The timestamps of all the task must be growing
* @param previousTimeStamp: Integer
* @param nextTask: Task
*/
operation Pipeline growingTaskTimestamps(previousTimeStamp: Integer, nextTask: Task) : Boolean {
	var max = previousTimeStamp;
	if (nextTask.isExecuted and nextTask.executionTimestamp > max) {
 		max = nextTask.executionTimestamp;
	} else if (nextTask.isExecuted) {
		return false;
	}
	
	if (nextTask.toFlow <> null and nextTask.toFlow.toTask <> null) {
		return self.growingTaskTimestamps(max, nextTask.toFlow.toTask);
	} else {
		return true;
	}
}

/**
* It returns true if there is no dataFlow connected to the given task, otherwise false.
*	@params task: Task
*/
operation Pipeline isFirstElementInTheTree(aTask: Task) : Boolean {
	 return self.flows->forAll(flow | flow.toTask <> aTask);
}


/**
* For every task of type data integration there must be at least two flows
*/
operation Pipeline dataIntegrationTasksCheck() : Boolean {
	var dataIntegrationTasks = self.tasks.select(task | task.isTypeOf(DataIntegrationTask));
	
	if (dataIntegrationTasks.size() == 0) {
		return true;
	}
	
	return dataIntegrationTasks.forAll(task | self.checkFlowsForIntegrationTask(task));
}

/**
* A dataIntegration task must have two flows
* @param task: DataIntegrationTask
*/
operation Pipeline checkFlowsForIntegrationTask(task: DataIntegrationTask) : Boolean {
	var totInFlows = 0;
	for (flow in self.flows) {
 		if (flow.toTask == task) {
 			totInFlows++;
 		}
 	}
	return totInFlows >= 2;
}


/**
* For every task of type data integration apply the validations
*/
operation Pipeline commonJoinAttributes() : Boolean {
	var dataIntegrationTasks = self.tasks.select(task | task.isTypeOf(DataIntegrationTask));
	
	return dataIntegrationTasks.forAll(task | self.checkFlowsAttributesForIntegrationTask(task));
}


/**
* Common attributes between the join attributes (specified in the task) and the Collections passed from the flows
* @param task: DataIntegrationTask
*/
operation Pipeline checkFlowsAttributesForIntegrationTask(task: DataIntegrationTask) : Boolean {
	var schema = task.joinAttributes;
	var taskFlows: Sequence;
	for (flow in self.flows) {
 		if (flow.toTask == task) {
 			taskFlows.add(flow);
 		}
 	}
 	
 	return taskFlows->forAll(flow | self.checkAttributesOfCollection(flow, schema));
}


/**
* Common attributes between the join attributes (specified in the task) and the Collections passed from the flows
* @param flow: DataFlow
* @param schema: DataSchema
*/
operation Pipeline checkAttributesOfCollection(flow: DataFlow, schema: DataSchema) : Boolean {
	if (flow.collection <> null and flow.collection.documents <> null) {
		return flow.collection.documents->exists(document | self.attributeExistsInDocument(document, schema));
	} else {
		return true;
	}
}

/**
* At least one attribute in common between document attributes and schema attributes
* @param document: Document
* @param schema: DataSchema
*/
operation Pipeline attributeExistsInDocument(document: Document, schema: DataSchema) : Boolean {
	var attributes: OrderedSet = document.attributes;
	return attributes->exists(attribute| schema.schemaAttributes-> exists(schemaAttr| attribute.name == schemaAttr.name));
}